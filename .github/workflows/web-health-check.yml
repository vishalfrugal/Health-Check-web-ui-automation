name: Daily Selenium Web UI Automation

on:
  workflow_dispatch:          # Manual trigger
  schedule:
    - cron: '30 4 * * *'      # Runs daily at 10 AM IST

jobs:
  selenium-tests:
    runs-on: ubuntu-latest
    env:
      BASE_URL: "https://vishalfrugal.github.io/Health-Check-web-ui-automation"

    steps:
      # Step 1 — Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2 — Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Step 3 — Install Google Chrome + ChromeDriver
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Verify Chrome installation
        run: google-chrome --version

      # Step 4 — Install Allure CLI
      - name: Install Allure
        run: |
          curl -o allure-2.13.8.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.13.8/allure-commandline-2.13.8.tgz
          sudo tar -zxvf allure-2.13.8.tgz -C /opt/
          sudo ln -s /opt/allure-2.13.8/bin/allure /usr/bin/allure

      # Step 5 — Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6 — Run Selenium tests (in headless mode)
      - name: Run Selenium Tests
        id: test_run
        run: mvn clean test -Dtestng=testng.xml

      # Step 7 — Generate Allure report
      - name: Generate Allure Report
        if: always()
        run: allure generate allure-results --clean -o allure-report

      # Step 8 — Upload Allure report artifact (optional)
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # Step 9 — Load previous Allure history (from gh-pages branch)
      - name: Load Allure History
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Step 10 — Build and merge Allure report history
      - name: Build Allure Report History
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results

      # Step 11 — Publish Allure report to GitHub Pages
      - name: Publish Allure Report to GitHub Pages
        id: publish_report
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      # Step 12 — Set deployment URL (unique per run)
      - name: Set Deployment URL
        if: always()
        run: |
          echo "DEPLOYMENT_URL=${{ env.BASE_URL }}/${{ github.run_number }}/#" >> $GITHUB_ENV
          echo "Deployment URL: ${{ env.BASE_URL }}/${{ github.run_number }}/#"

      # Step 13 — Send Slack Notification
      - name: Send Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Selenium Automation Report"
          SLACK_MESSAGE: |
            *Project:* `${{ github.repository }}`
            *Run ID:* `${{ github.run_number }}`
            *Status:* `${{ job.status }}`
            *Allure Report:* ${{ env.BASE_URL }}/${{ github.run_number }}/#
